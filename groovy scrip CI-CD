pipeline {
    agent any

    environment {
        JAVA_HOME = tool 'jdk17'
        NODE_HOME = tool 'node16'
        PATH = "${JAVA_HOME}/bin:${NODE_HOME}/bin:${env.PATH}:/opt/sonar-scanner/bin"
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
                echo "Workspace cleaned successfully."
            }
        }

        stage('Checkout from Git') {
            steps {
                script {
                    try {
                        git branch: 'main', url: 'https://github.com/Anilgollena/Zomato-Clone.git'
                        echo "Repository cloned successfully."
                    } catch (Exception e) {
                        error "Git checkout failed: ${e}"
                    }
                }
            }
        }

        stage('Debug Environment') {
            steps {
                sh "env"
                sh "java -version"
                sh "node -v"
                sh "which sonar-scanner || echo 'SonarScanner not found!'"
            }
        }

        stage('Install Dependencies') {
            steps {
                sh "npm install"
                echo "Dependencies installed successfully."
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh """
                        sonar-scanner \
                        -Dsonar.projectKey=zomato \
                        -Dsonar.projectName=zomato \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=http://18.209.101.67:9000 \
                        -Dsonar.login=squ_9e68a199e9023df064daa5c0f1f641d524af3aac
                    """
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    def qualityGate = waitForQualityGate abortPipeline: true, credentialsId: 'sonar-token'
                    echo "Quality Gate status: ${qualityGate.status}"
                    if (qualityGate.status != 'OK') {
                        error "SonarQube Quality Gate failed!"
                    }
                }
            }
        }

        stage('Build Application') {
            steps {
                sh "npm run build"
                echo "Build completed successfully."
            }
        }

        stage('Run Tests') {
            steps {
                sh "npm test"
                echo "Tests executed successfully."
            }
        }

        stage('OWASP FS Scan') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        stage('TRIVY FS Scan') {
            steps {
                sh "trivy fs . > trivyfs.txt"
            }
        }

        stage('Docker Build & Push') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                        sh "docker build -t zomato ."
                        sh "docker tag zomato anil132/zomato:latest"
                        sh "docker push anil132/zomato:latest"
                    }
                }
            }
        }

        stage('TRIVY Scan Image') {
            steps {
                sh "trivy image anil132/zomato:latest > trivy.txt"
            }
        }

        stage('Deploy to Container') {
            steps {
                script {
                    // Stop and remove any existing container named 'zomato'
                    sh '''
                        if [ $(docker ps -q -f name=zomato) ]; then
                            echo "Stopping and removing existing container..."
                            docker stop zomato
                            docker rm zomato
                        fi
                    '''
                    
                    // Run the new container
                    sh 'docker run -d --name zomato -p 3000:3000 anil132/zomato:latest'
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline execution completed."
        }
        success {
            echo "Pipeline executed successfully!"
        }
        failure {
            echo "Pipeline failed! Check the logs for more details."
        }
    }
}
